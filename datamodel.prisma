type Image {
  id: ID! @id @unique
  url: String @unique
  height: Int
  width: Int
}

type User {
  id: ID! @id @unique
  user_id: String! @unique
  birthday: DateTime
  country: String
  display_name: String
  email: String @unique
  href: String @unique
  product: String
  uri: String @unique
  images: [Image]
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type Playlist {
  id: ID! @id @unique
  playlist_id: String! @unique
  latest_snapshot_id: String! @unique
  description: String
  href: String @unique
  name: String
  owner: User @relation(link: INLINE, name: "PlaylistOwner")
  uri: String @unique
  public: Boolean
  images: [Image]
  snapshots: [PlaylistSnapshot]! @relation(name: "PlaylistSnapshotToPlaylist")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type PlaylistSnapshot {
  id: ID! @id @unique
  snapshot_id: String! @unique
  playlist: Playlist @relation(link: INLINE, name: "PlaylistSnapshotToPlaylist")
  track_count: Int
  playlist_tracks: [PlaylistTrack]!
    @relation(name: "PlaylistTrackToPlaylistSnapshot")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type PlaylistTrack {
  id: ID! @id @unique
  snapshot: PlaylistSnapshot
    @relation(link: INLINE, name: "PlaylistTrackToPlaylistSnapshot")
  added_by: User @relation(link: TABLE, name: "PlaylistTrackAddedByUser")
  added_at: DateTime
  is_local: Boolean
  order: Int!
  track: Track
  updated_at: DateTime @updatedAt
  created_at: DateTime @createdAt
}

type Market {
  id: ID! @id @unique
  country_code: String! @unique
}

enum AlbumType {
  ALBUM
  SINGLE
  COMPILATION
}

type Genre {
  id: ID! @id @unique
  name: String! @unique
}

enum ReleaseDatePrecision {
  YEAR
  MONTH
  DAY
}

type Artist {
  id: ID! @id @unique
  artist_id: String! @unique
  uri: String @unique
  href: String @unique
  genres: [Genre]!
  followerCount: Int!
  images: [Image]!
  name: String
  popularity: Int
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type Album {
  id: ID! @id @unique
  album_id: String! @unique
  uri: String @unique
  href: String @unique
  album_type: AlbumType
  artists: [Artist]!
  available_markets: [Market]!
  genres: [Genre]!
  images: [Image]!
  label: String
  name: String
  popularity: Int
  release_date: DateTime
  release_date_precision: ReleaseDatePrecision
  tracks: [Track]!
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type Track {
  id: ID! @id @unique
  track_id: String! @unique
  uri: String @unique
  href: String @unique
  disc_number: Int
  track_number: Int
  duration_ms: Int
  explicit: Boolean
  name: String
  popularity: Int
  preview_url: String
  album: Album
  artists: [Artist]!
  features: AudioFeatures @relation(name: "AudioFeaturesToTrack")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

enum Mode {
  MAJOR
  MINOR
}

enum CamelotRing {
  INNER
  OUTER
}

type Key {
  id: ID! @id @unique
  root_note_index: Int
  mode: Mode
  camelot_position: Int
  camelot_ring: CamelotRing
  camelot_code: String
}

type AudioFeatures {
  id: ID! @id @unique
  uri: String! @unique
  track: Track @relation(link: INLINE, name: "AudioFeaturesToTrack")
  danceability: Float
  energy: Float
  root_note: Int
  loudness: Float
  mode: Mode
  speechiness: Float
  acousticness: Float
  instrumentalness: Float
  liveness: Float
  valence: Float
  tempo: Float
  duration_ms: Int
  time_signature: Int
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}
