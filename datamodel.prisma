type Image {
  id: ID! @id @unique
  url: String @unique
  height: Int
  width: Int
}

type User {
  id: ID! @id @unique
  user_id: String! @unique
  birthday: DateTime
  country: String
  display_name: String
  email: String @unique
  href: String @unique
  product: String
  uri: String @unique
  images: [Image]
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

enum PlaylistSnapshotStatus {
  INITIALIZED
  LOADED
}

type PlaylistTrack {
  id: ID! @id @unique
  snapshot: PlaylistSnapshot @relation(link: INLINE, name: "PlaylistTrackToPlaylistSnapshot")
  added_by: User @relation(link: TABLE, name: "PlaylistTrackAddedByUser")
  added_at: DateTime
  is_local: Boolean
  order: Int!
  track: Track! @relation(name: "PlaylistTrackToTrack")
  updated_at: DateTime @updatedAt
  created_at: DateTime @createdAt
}

type PlaylistSnapshot {
  id: ID! @id @unique
  snapshot_id: String! @unique
  playlist: Playlist @relation(link: INLINE, name: "PlaylistSnapshotToPlaylist")
  status: PlaylistSnapshotStatus! @default(value: INITIALIZED)
  track_count: Int!
  loaded_tracks: Int! @default(value: 0)
  playlist_tracks: [PlaylistTrack!]! @relation(name: "PlaylistTrackToPlaylistSnapshot")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type Playlist {
  id: ID! @id @unique
  playlist_id: String! @unique
  latest_snapshot_id: String! @unique
  description: String
  href: String @unique
  name: String
  owner: User @relation(link: INLINE, name: "PlaylistOwner")
  uri: String @unique
  public: Boolean
  collaborative: Boolean
  images: [Image]
  snapshots: [PlaylistSnapshot!]! @relation(name: "PlaylistSnapshotToPlaylist")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type Market {
  id: ID! @id @unique
  country_code: String! @unique
}

enum AlbumType {
  ALBUM
  SINGLE
  COMPILATION
}

type Genre {
  id: ID! @id @unique
  name: String! @unique
  artists: [Artist!]! @relation(name: "ArtistToGenre")
  albums: [Album!]! @relation(name: "AlbumToGenre")
  tracks: [Track!]! @relation(name: "TrackToGenre")
}

enum ReleaseDatePrecision {
  YEAR
  MONTH
  DAY
}

type Artist {
  id: ID! @id @unique
  artist_id: String! @unique
  uri: String @unique
  href: String @unique
  genres: [Genre]! @relation(name: "ArtistToGenre")
  follower_count: Int
  images: [Image]!
  name: String
  popularity: Int
  albums: [Album]! @relation(name: "AlbumToArtist")
  tracks: [Track]! @relation(name: "TrackToArtist")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type Album {
  id: ID! @id @unique
  album_id: String! @unique
  uri: String @unique
  href: String @unique
  album_type: AlbumType
  artists: [Artist]! @relation(name: "AlbumToArtist")
  available_markets: [Market]!
  genres: [Genre]! @relation(name: "AlbumToGenre")
  images: [Image]!
  label: String
  name: String
  popularity: Int
  release_date: DateTime
  release_date_precision: ReleaseDatePrecision
  tracks: [Track]! @relation(name: "TrackToAlbum")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type Track {
  id: ID! @id @unique
  track_id: String! @unique
  uri: String @unique
  href: String @unique
  disc_number: Int
  track_number: Int
  duration_ms: Int
  explicit: Boolean
  name: String
  popularity: Int
  preview_url: String
  album: Album @relation(link: INLINE, name: "TrackToAlbum")
  playlist_tracks: [PlaylistTrack]! @relation(name: "PlaylistTrackToTrack")
  artists: [Artist]! @relation(name: "TrackToArtist")
  features: AudioFeatures @relation(name: "AudioFeaturesToTrack")
  analysis: AudioAnalysis @relation(name: "AudioAnalysisToTrack")
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

enum Mode {
  MAJOR
  MINOR
}

type Note {
  id: ID! @id @unique
  label: String! @unique
  index: Int! @unique
}

type Key {
  id: ID! @id @unique
  label: String! @unique
  camelot_code: String! @unique
  root_note: Note! @relation(link: INLINE, name: "KeyToRootNote")
  mode: Mode!
  camelot_position: Int!
}

type AudioFeatures {
  id: ID! @id @unique
  uri: String! @unique
  track: Track @relation(link: INLINE, name: "AudioFeaturesToTrack")
  danceability: Float
  energy: Float
  key: Key @relation(link: INLINE, name: "AudioFeaturesToKey")
  loudness: Float
  speechiness: Float
  acousticness: Float
  instrumentalness: Float
  liveness: Float
  valence: Float
  tempo: Float
  duration_ms: Int
  time_signature: Int
  updated_at: DateTime! @updatedAt
  created_at: DateTime! @createdAt
}

type AudioAnalysis {
  id: ID! @id @unique
  uri: String! @unique
  track: Track @relation(link: INLINE, name: "AudioAnalysisToTrack")
  num_samples: Int
  duration: Float
  end_of_fade_in: Float
  start_of_fade_out: Float
  loudnes: Float
  tempo: Float
  tempo_confidence: Float
  time_signature: Int
  time_signature_confidence: Float
  key: Key
  root_note_confidence: Float
  mode_confidence: Float
  sections: [AudioAnalysisSection]! @relation(name: "AudioAnalysisSectionToAudioAnalysis")
}

type AudioAnalysisSection {
  id: ID! @id @unique
  analysis: AudioAnalysis @relation(link: INLINE, name: "AudioAnalysisSectionToAudioAnalysis")
  start: Float
  duration: Float
  confidence: Float
  loudness: Float
  tempo: Float
  tempo_confidence: Float
  key: Key
  root_note_confidence: Float
  mode_confidence: Float
  time_signature: Int
  time_signature_confidence: Float
}

enum OptimizationJobStatus {
  INITIALIZED
  EXTRACTED
  OPTIMIZING
  DONE
}

type OptimizationJob {
  id: ID! @id @unique
  original_playlist_snapshot: PlaylistSnapshot!
  status: OptimizationJobStatus! @default(value: INITIALIZED)
  extract_path: String
  start: DateTime!
  end: DateTime
}

type SolverConstraintViolation {
  id: ID! @id @unique
  solver_status: SolverStatusUpdate! @relation(link: INLINE, name: "SolverStatusToConstraintViolation")
  constraint_name: String!
  violation_count: Int!
  score_impact: String!
}

type SolverStatusUpdate {
  id: ID! @id @unique
  job: OptimizationJob!
  best_score: String!
  time_millis_spent: Int!
  constraint_violations: [SolverConstraintViolation!]! @relation(name: "SolverStatusToConstraintViolation")
}
